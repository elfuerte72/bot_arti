import os
import uuid
import logging

from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command

from config.settings import settings
from core.command_router import handle_command
from voice.speech_to_text import process_voice_message
from voice.text_to_speech import synthesize_response

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

# Create routers
router = Router()
cmd_router = Router()


@cmd_router.message(Command("start"))
async def cmd_start(message: Message) -> None:
    """Handle /start command."""
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è–º–∏. "
        "–û—Ç–ø—Ä–∞–≤–ª—è–π –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã "
        "–¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ª–∞–π–¥–∞–º–∏.\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥: '—Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥', '–Ω–∞–∑–∞–¥', '–Ω–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é'."
    )


@cmd_router.message(Command("help"))
async def cmd_help(message: Message) -> None:
    """Handle /help command."""
    help_text = (
        "üìù <b>–¢–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "- —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥\n"
        "- –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–∞–π–¥\n"
        "- –ø–∞—É–∑–∞\n"
        "- –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å\n"
        "- –Ω–∞—á–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\n"
        "- –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é\n"
        "- —Å—Ç–∞—Ç—É—Å\n"
        "- –≥–æ–≤–æ—Ä–∏/—á–∏—Ç–∞–π (–æ–∑–≤—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞)\n"
        "- –ø–æ–≤—Ç–æ—Ä–∏ (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–ª–æ–∫)\n"
        "- –æ—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å: [—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞]\n\n"
        "üé§ <b>–ì–æ–ª–æ—Å–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "–í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª—é–±–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –≤—ã—à–µ."
    )
    await message.answer(help_text, parse_mode="HTML")


@router.message(F.voice)
async def voice_message_handler(message: Message) -> None:
    """
    Handle voice messages from the user.
    
    Download, save to a temp file, and pass to the STT service.
    """
    # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_msg = await message.answer("üéß –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    # Create unique file name for voice message
    voice_file_name = f"{uuid.uuid4()}.ogg"
    voice_file_path = settings.VOICE_TEMP_PATH / voice_file_name
    
    try:
        # Download voice message
        await message.bot.download(
            message.voice,
            destination=voice_file_path
        )
        
        # Process voice with STT
        try:
            text = await process_voice_message(voice_file_path)
        except Exception as e:
            await message.reply(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}")
            await processing_msg.delete()
            return

        # Process the command
        result = await handle_command(text)
        
        # Prepare response text
        response_text = f"üéôÔ∏è –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: \"{text}\"\n\n"
        
        # Add execution details if available
        if "execution_result" in result:
            exec_result = result["execution_result"]
            if exec_result["success"]:
                response_text += f"‚úÖ {exec_result['message']}"
            else:
                response_text += f"‚ùå {exec_result['message']}"
        else:
            response_text += (
                f"–ö–æ–º–∞–Ω–¥–∞: {result['action']} "
                f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})"
            )
        
        # Delete processing message
        await processing_msg.delete()
        
        # Reply with text response
        await message.reply(response_text)
        
        # Generate voice response for most commands
        if (result["confidence"] > 0.8 and "execution_result" in result):
            exec_result = result["execution_result"]
            
            # Special handling for speak_next_block and repeat_last_block
            if (result["action"] in ["speak_next_block", "repeat_last_block"] and 
                    exec_result["success"] and "text_to_speak" in exec_result):
                try:
                    # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ª–∞–π–¥–∞
                    voice_response = await synthesize_response(
                        exec_result["text_to_speak"],
                        rate=0.9  # –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
                    )
                    
                    # Send voice message
                    voice_file = FSInputFile(voice_response)
                    await message.answer_voice(voice_file)
                    
                    # Cleanup voice file
                    os.remove(voice_response)
                except Exception as e:
                    logger.exception(f"Error synthesizing slide text: {e}")
                    await message.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–ª–∞–π–¥–∞"
                    )
            # Standard response for other commands
            elif exec_result["success"]:
                try:
                    voice_response = await synthesize_response(
                        exec_result["message"]
                    )
                    
                    # Send voice message
                    voice_file = FSInputFile(voice_response)
                    await message.answer_voice(voice_file)
                    
                    # Cleanup voice file
                    os.remove(voice_response)
                except Exception as e:
                    logger.exception(f"Error synthesizing response: {e}")
    
    except Exception as e:
        logger.exception(f"Error processing voice message: {e}")
        await processing_msg.delete()
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
    
    finally:
        # Clean up the temporary file
        if os.path.exists(voice_file_path):
            try:
                os.remove(voice_file_path)
            except Exception as e:
                logger.error(f"Error removing temporary file: {e}")


@router.message(F.text)
async def text_message_handler(message: Message) -> None:
    """Handle text messages and process as commands."""
    # Process the command
    result = await handle_command(message.text)
    
    # If command is recognized with sufficient confidence
    if result["confidence"] > 0.7:
        # Prepare response based on execution result
        if "execution_result" in result:
            exec_result = result["execution_result"]
            
            if exec_result["success"]:
                response_text = f"‚úÖ {exec_result['message']}"
            else:
                response_text = f"‚ùå {exec_result['message']}"
            
            await message.reply(response_text)
            
            # Special handling for speak_next_block and repeat_last_block
            if (result["action"] in ["speak_next_block", "repeat_last_block"] and 
                    exec_result["success"] and "text_to_speak" in exec_result):
                try:
                    # –°–∏–Ω—Ç–µ–∑–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ —Å–ª–∞–π–¥–∞
                    voice_response = await synthesize_response(
                        exec_result["text_to_speak"],
                        rate=0.9  # –ù–µ–º–Ω–æ–≥–æ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –¥–ª—è –ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è
                    )
                    
                    # Send voice message
                    voice_file = FSInputFile(voice_response)
                    await message.answer_voice(voice_file)
                    
                    # Cleanup voice file
                    os.remove(voice_response)
                except Exception as e:
                    logger.exception(f"Error synthesizing slide text: {e}")
                    await message.answer(
                        "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞ —Å–ª–∞–π–¥–∞"
                    )
            # Optional voice response for successful commands
            elif exec_result["success"] and result["confidence"] > 0.85:
                try:
                    voice_response = await synthesize_response(
                        exec_result["message"]
                    )
                    voice_file = FSInputFile(voice_response)
                    await message.answer_voice(voice_file)
                    os.remove(voice_response)
                except Exception as e:
                    logger.exception(f"Error synthesizing response: {e}")
        else:
            await message.reply(
                f"–í—ã–ø–æ–ª–Ω—è—é –∫–æ–º–∞–Ω–¥—É: {result['action']} "
                f"(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.2f})"
            )
    else:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
        help_hint = (
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
        )
        
        # –ï—Å–ª–∏ —Ö–æ—Ç—è –±—ã –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        if result["confidence"] > 0.3:
            await message.reply(
                f"ü§î –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É "
                f"'{result['action']}'?\n\n{help_hint}"
            )
        else:
            await message.reply(
                f"‚ùì –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∫–æ–º–∞–Ω–¥—É. {help_hint}"
            )
